{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst axiosInstance = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add token to requests if it exists\naxiosInstance.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nexport const auth = {\n  async login(email, password) {\n    const response = await axiosInstance.post('/auth/login', {\n      email,\n      password\n    });\n    return response.data;\n  },\n  async signup(userData) {\n    const response = await axiosInstance.post('/auth/signup', userData);\n    return response.data;\n  },\n  async logout() {\n    await axiosInstance.post('/auth/logout');\n  },\n  async getCurrentUser() {\n    const response = await axiosInstance.get('/auth/me');\n    return response.data;\n  },\n  async updateProfile(userData) {\n    const response = await axiosInstance.put('/auth/profile', userData);\n    return response.data;\n  },\n  async forgotPassword(email) {\n    const response = await axiosInstance.post('/auth/forgot-password', {\n      email\n    });\n    return response.data;\n  },\n  async resetPassword(token, password) {\n    const response = await axiosInstance.post('/auth/reset-password', {\n      token,\n      password\n    });\n    return response.data;\n  }\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","axiosInstance","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","auth","login","email","password","response","post","data","signup","userData","logout","getCurrentUser","get","updateProfile","put","forgotPassword","resetPassword"],"sources":["C:/Users/dteja/OneDrive/Desktop/TEJA/ALO/frontend/src/services/auth.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add token to requests if it exists\r\naxiosInstance.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\nexport const auth = {\r\n  async login(email, password) {\r\n    const response = await axiosInstance.post('/auth/login', { email, password });\r\n    return response.data;\r\n  },\r\n\r\n  async signup(userData) {\r\n    const response = await axiosInstance.post('/auth/signup', userData);\r\n    return response.data;\r\n  },\r\n\r\n  async logout() {\r\n    await axiosInstance.post('/auth/logout');\r\n  },\r\n\r\n  async getCurrentUser() {\r\n    const response = await axiosInstance.get('/auth/me');\r\n    return response.data;\r\n  },\r\n\r\n  async updateProfile(userData) {\r\n    const response = await axiosInstance.put('/auth/profile', userData);\r\n    return response.data;\r\n  },\r\n\r\n  async forgotPassword(email) {\r\n    const response = await axiosInstance.post('/auth/forgot-password', { email });\r\n    return response.data;\r\n  },\r\n\r\n  async resetPassword(token, password) {\r\n    const response = await axiosInstance.post('/auth/reset-password', {\r\n      token,\r\n      password,\r\n    });\r\n    return response.data;\r\n  },\r\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAE5E,MAAMC,aAAa,GAAGL,KAAK,CAACM,MAAM,CAAC;EACjCC,OAAO,EAAEN,OAAO;EAChBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,aAAa,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACjD,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;AAEF,OAAO,MAAMK,IAAI,GAAG;EAClB,MAAMC,KAAKA,CAACC,KAAK,EAAEC,QAAQ,EAAE;IAC3B,MAAMC,QAAQ,GAAG,MAAMhB,aAAa,CAACiB,IAAI,CAAC,aAAa,EAAE;MAAEH,KAAK;MAAEC;IAAS,CAAC,CAAC;IAC7E,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED,MAAMC,MAAMA,CAACC,QAAQ,EAAE;IACrB,MAAMJ,QAAQ,GAAG,MAAMhB,aAAa,CAACiB,IAAI,CAAC,cAAc,EAAEG,QAAQ,CAAC;IACnE,OAAOJ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED,MAAMG,MAAMA,CAAA,EAAG;IACb,MAAMrB,aAAa,CAACiB,IAAI,CAAC,cAAc,CAAC;EAC1C,CAAC;EAED,MAAMK,cAAcA,CAAA,EAAG;IACrB,MAAMN,QAAQ,GAAG,MAAMhB,aAAa,CAACuB,GAAG,CAAC,UAAU,CAAC;IACpD,OAAOP,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED,MAAMM,aAAaA,CAACJ,QAAQ,EAAE;IAC5B,MAAMJ,QAAQ,GAAG,MAAMhB,aAAa,CAACyB,GAAG,CAAC,eAAe,EAAEL,QAAQ,CAAC;IACnE,OAAOJ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED,MAAMQ,cAAcA,CAACZ,KAAK,EAAE;IAC1B,MAAME,QAAQ,GAAG,MAAMhB,aAAa,CAACiB,IAAI,CAAC,uBAAuB,EAAE;MAAEH;IAAM,CAAC,CAAC;IAC7E,OAAOE,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED,MAAMS,aAAaA,CAACnB,KAAK,EAAEO,QAAQ,EAAE;IACnC,MAAMC,QAAQ,GAAG,MAAMhB,aAAa,CAACiB,IAAI,CAAC,sBAAsB,EAAE;MAChET,KAAK;MACLO;IACF,CAAC,CAAC;IACF,OAAOC,QAAQ,CAACE,IAAI;EACtB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}