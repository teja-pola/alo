{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst axiosInstance = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add token to requests if it exists\naxiosInstance.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nexport const payment = {\n  async createPaymentIntent(bookingData) {\n    const response = await axiosInstance.post('/payments/create-intent', bookingData);\n    return response.data;\n  },\n  async confirmPayment(paymentIntentId, paymentMethodId) {\n    const response = await axiosInstance.post('/payments/confirm', {\n      paymentIntentId,\n      paymentMethodId\n    });\n    return response.data;\n  },\n  async initiateUPIPayment(bookingData) {\n    const response = await axiosInstance.post('/payments/upi/initiate', bookingData);\n    return response.data;\n  },\n  async verifyUPIPayment(transactionId) {\n    const response = await axiosInstance.post('/payments/upi/verify', {\n      transactionId\n    });\n    return response.data;\n  }\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","axiosInstance","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","payment","createPaymentIntent","bookingData","response","post","data","confirmPayment","paymentIntentId","paymentMethodId","initiateUPIPayment","verifyUPIPayment","transactionId"],"sources":["C:/Users/dteja/OneDrive/Desktop/TEJA/ALO/frontend/src/services/payment.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add token to requests if it exists\r\naxiosInstance.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\nexport const payment = {\r\n  async createPaymentIntent(bookingData) {\r\n    const response = await axiosInstance.post('/payments/create-intent', bookingData);\r\n    return response.data;\r\n  },\r\n\r\n  async confirmPayment(paymentIntentId, paymentMethodId) {\r\n    const response = await axiosInstance.post('/payments/confirm', {\r\n      paymentIntentId,\r\n      paymentMethodId,\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  async initiateUPIPayment(bookingData) {\r\n    const response = await axiosInstance.post('/payments/upi/initiate', bookingData);\r\n    return response.data;\r\n  },\r\n\r\n  async verifyUPIPayment(transactionId) {\r\n    const response = await axiosInstance.post('/payments/upi/verify', {\r\n      transactionId,\r\n    });\r\n    return response.data;\r\n  },\r\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAE5E,MAAMC,aAAa,GAAGL,KAAK,CAACM,MAAM,CAAC;EACjCC,OAAO,EAAEN,OAAO;EAChBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,aAAa,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACjD,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;AAEF,OAAO,MAAMK,OAAO,GAAG;EACrB,MAAMC,mBAAmBA,CAACC,WAAW,EAAE;IACrC,MAAMC,QAAQ,GAAG,MAAMf,aAAa,CAACgB,IAAI,CAAC,yBAAyB,EAAEF,WAAW,CAAC;IACjF,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED,MAAMC,cAAcA,CAACC,eAAe,EAAEC,eAAe,EAAE;IACrD,MAAML,QAAQ,GAAG,MAAMf,aAAa,CAACgB,IAAI,CAAC,mBAAmB,EAAE;MAC7DG,eAAe;MACfC;IACF,CAAC,CAAC;IACF,OAAOL,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED,MAAMI,kBAAkBA,CAACP,WAAW,EAAE;IACpC,MAAMC,QAAQ,GAAG,MAAMf,aAAa,CAACgB,IAAI,CAAC,wBAAwB,EAAEF,WAAW,CAAC;IAChF,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED,MAAMK,gBAAgBA,CAACC,aAAa,EAAE;IACpC,MAAMR,QAAQ,GAAG,MAAMf,aAAa,CAACgB,IAAI,CAAC,sBAAsB,EAAE;MAChEO;IACF,CAAC,CAAC;IACF,OAAOR,QAAQ,CAACE,IAAI;EACtB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}